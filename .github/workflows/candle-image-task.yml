name: Candle Image Task

on:
  repository_dispatch:
    types: [candle-image-task]
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'Name of the VM to run tasks on'
        required: true

jobs:
  run-candle-image-task:
    runs-on: ubuntu-latest
    steps:

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Run Candle Image Task
      env:
        STORAGE_ACCOUNT_KEY: ${{ secrets.STORAGE_ACCOUNT_KEY }}
      run: |
        VM_NAME="${{ github.event.client_payload.vm_name || github.event.inputs.vm_name }}"
        OUTPUT=$(az vm run-command invoke\
            --resource-group githubVM \
            --name "$VM_NAME" \
            --command-id RunShellScript \
            --scripts "
                #!/bin/bash
                set -e
                # Install C compiler and related tools
                apt-get update
                apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler
                # Now install Rust
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y;
                echo 'Checking installation...'
                CARGO_HOME='/root/.cargo'
                RUSTUP_HOME='/root/.rustup'
                echo \"CARGO_HOME: \$CARGO_HOME\";
                echo \"RUSTUP_HOME: \$RUSTUP_HOME\";
                if [ -d \"\$CARGO_HOME/bin\" ]; then
                    echo '.cargo/bin directory exists.'
                    ls -alh \"\$CARGO_HOME/bin\"
                else
                    echo '.cargo/bin directory NOT found.'
                    exit 1
                fi
                # Using the bash shell to source the environment variables
                /bin/bash -c \"source \$CARGO_HOME/env\"
                echo \$PATH
                /root/.cargo/bin/rustc --version || echo 'rustc not found after installation.'
                git clone https://github.com/huggingface/candle.git;
                cd candle;
                /root/.cargo/bin/cargo build --example whisper --release || echo 'cargo build failed.';
                # Navigate to the build directory
                cd target/release/examples
                ./whisper
                # Confirm current directory
                echo \"Current directory:\"
                pwd

                # List contents of the directory
                echo \"Listing contents of \$(pwd):\"
                ls -al

                # Check if whisper binary exists in the expected location
                WHISPER_BINARY_PATH=\"\$(pwd)/whisper\"
                if [ -f \"\$WHISPER_BINARY_PATH\" ]; then
                    echo \"Whisper binary exists at \$WHISPER_BINARY_PATH\"

                    # Set HOME environment variable explicitly for Git
                    export HOME=/root

                    # Install Git LFS
                    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
                    apt-get install git-lfs
                    git lfs install

                    # Navigate to the repository root
                    cd ../../../

                    # Initialize the repository if not already done
                    git init

                    # Configure Git with your name and email
                    git config --global user.email "scott.lai@duke.edu"
                    git config --global user.name "ScottLL"
        
                    # Track the binary using Git LFS
                    git lfs track \"target/release/examples/*\"

                    # Add the binary to Git
                    git add -f target/release/examples/*

                    git commit -m \"Add whisper binary\"
                    git push origin main

                else
                    echo \"Whisper binary not found at \$WHISPER_BINARY_PATH\"
                    # List the contents of the current directory for debugging
                    ls -al
                    exit 1
                fi
                
                " \
            --parameters STORAGE_ACCOUNT_KEY="$STORAGE_ACCOUNT_KEY" \
            --query "value[].message" --output tsv)
        echo "Command Output:"
        echo "$OUTPUT"
    



    # - name: Download Whisper Binary
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
    #     scp -o StrictHostKeyChecking=no runner@172.191.177.239:/root/candle/target/release/examples/whisper .
    #   env:
    #     VM_USER: runner
    #     SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}

    # - name: Track with Git LFS
    #   run: |
    #     git lfs track "whisper"
    #     git add .gitattributes whisper

    # - name: Commit and push Whisper binary
    #   run: |
    #     git config --local user.email "action@github.com"
    #     git config --local user.name "GitHub Action"
    #     git commit -m "Add Whisper binary with LFS" -- whisper .gitattributes
    #     git push

    # - name: Download Whisper Binary
    #   env:
    #     VM_NAME: ${{ github.event.client_payload.vm_name || github.event.inputs.vm_name }}
    #     VM_USER: runner # Replace with your VM's user name
    #     VM_IP: 172.191.39.190 # Replace with your VM's public IP address
    #     SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}

    #     run: |
    #       mkdir -p ~/.ssh
    #       echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    #       chmod 600 ~/.ssh/id_rsa
    #       # Use SCP to copy the binary from VM to the GitHub runner
    #       scp -o StrictHostKeyChecking=no $VM_USER@172.191.177.239:/candle/target/release/examples/whisper .
    #     shell: bash
    #     env:
    #       VM_USER: runner
    #       SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
      

    # - name: Upload Whisper Binary
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: whisper-binary
    #     path: ./whisper # If you copied the file to the current directory
  


    # cargo new myapp; cd myapp; ls; cargo build --example whisper --release; ls; cd target/release/examples; ls
    # - name: Deallocate VM
    #   run: |
    #     VM_NAME="${{ github.event.client_payload.vm_name || github.event.inputs.vm_name }}"
    #     az vm deallocate --resource-group githubVM --name "$VM_NAME"
