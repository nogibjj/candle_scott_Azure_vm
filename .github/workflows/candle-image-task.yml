name: Candle Image Task

on:
  repository_dispatch:
    types: [candle-image-task]
  workflow_dispatch:
    inputs:
      vm_name:
        description: 'Name of the VM to run tasks on'
        required: true

jobs:
  run-candle-image-task:
    runs-on: ubuntu-latest
    steps:

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Run Candle Image Task
      run: |
        VM_NAME="${{ github.event.client_payload.vm_name || github.event.inputs.vm_name }}"
        OUTPUT=$(az vm run-command invoke \
            --resource-group githubVM \
            --name "$VM_NAME" \
            --command-id RunShellScript \
            --scripts "
                #!/bin/bash
                set -e
                # Install C compiler and related tools
                apt-get update
                apt-get install -y build-essential pkg-config libssl-dev
                # Now install Rust
                curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y;
                echo 'Checking installation...'
                CARGO_HOME='/root/.cargo'
                RUSTUP_HOME='/root/.rustup'
                echo \"CARGO_HOME: \$CARGO_HOME\";
                echo \"RUSTUP_HOME: \$RUSTUP_HOME\";
                if [ -d \"\$CARGO_HOME/bin\" ]; then
                    echo '.cargo/bin directory exists.'
                    ls -alh \"\$CARGO_HOME/bin\"
                else
                    echo '.cargo/bin directory NOT found.'
                    exit 1
                fi
                # Using the bash shell to source the environment variables
                /bin/bash -c \"source \$CARGO_HOME/env\"
                echo \$PATH
                /root/.cargo/bin/rustc --version || echo 'rustc not found after installation.'
                git clone https://github.com/huggingface/candle.git;
                cd candle;
                /root/.cargo/bin/cargo build --example whisper --release || echo 'cargo build failed.';
                ls;
                cd target/release/examples;
                ls;
                " \
            --query "value[].message" --output tsv)
        echo "Command Output:"
        echo "$OUTPUT"
    

    - name: Download Whisper Binary
      env:
        VM_NAME: ${{ github.event.client_payload.vm_name || github.event.inputs.vm_name }}
        VM_USER: runner # Replace with your VM's user name
        VM_IP: 172.191.39.190 # Replace with your VM's public IP address
        SSH_PRIVATE_KEY: ${{ secrets.VM_SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Use SCP to copy the binary from VM to the GitHub runner
        # The below line assumes you want to copy it to the current directory
        scp -o StrictHostKeyChecking=no $VM_USER@$VM_IP:/candle/target/release/examples/whisper .
      shell: bash

    - name: Upload Whisper Binary
      uses: actions/upload-artifact@v2
      with:
        name: whisper-binary
        path: ./whisper # If you copied the file to the current directory
  


    # cargo new myapp; cd myapp; ls; cargo build --example whisper --release; ls; cd target/release/examples; ls
    # - name: Deallocate VM
    #   run: |
    #     VM_NAME="${{ github.event.client_payload.vm_name || github.event.inputs.vm_name }}"
    #     az vm deallocate --resource-group githubVM --name "$VM_NAME"
